version: "3.8"

services:
  # Postgres database
  postgres:
    image: postgres
    shm_size: 128mb
    environment:
      POSTGRES_PASSWORD: Kill
      POSTGRES_USER: postgres
      POSTGRES_DB: orderoptima
      PGDATA: /var/lib/postgreql/data
      POSTGRES_HOST_AUTH_METHOD: trust

    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data  
    networks:
      - orderoptima-network
  zookeeper:
   image: bitnami/zookeeper:latest
   container_name: zookeeper
   ports:
     - 2181:2181
   environment:
     ZOOKEEPER_SERVER_ID: 1
     ZOOKEEPER_CLIENT_PORT: 2181
     ZOOKEEPER_TICK_TIME: 2000
     ALLOW_ANONYMOUS_LOGIN: yes
   networks:
      - orderoptima-network
   volumes:
      - zookeeper-data:/bitnami/zookeeper
  broker:
    image:  docker.io/bitnami/kafka:latest
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    volumes:
      - kafka-data:/bitnami/kafka
    networks:
      - orderoptima-network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#email service
  email-service:
    build: 
      context: .
      dockerfile: Dockerfile.email
    restart: always
    depends_on:
      - postgres 
      - service-discovery 
    environment:
      DB_HOST: postgres  
      DB_USERNAME: postgres
      DB_PASSWORD: kill
      DB_NAME: orderoptima
      DISCOVERY: "service-discovery"
      mail.host: mail.abinet.dev
      mail.password: FPFzjDbzFwUKh9DjYP79
      mail.username: askuala@abinet.dev
    networks:
      - orderoptima-network  
  # Auth service
  api-service:
    build: 
      context: .
      dockerfile: Dockerfile.api
    restart: always
    depends_on:
      - service-discovery 
    ports:
      - "8181:8181" 
    networks:
      - orderoptima-network
    environment:
      DISCOVERY: "service-discovery"

  auth-service:
    build: 
      context: .
      dockerfile: Dockerfile.auth
    restart: always
    depends_on:
      - postgres 
      - service-discovery 
    environment:
      DB_HOST: postgres  
      DB_USERNAME: postgres
      DB_PASSWORD: kill
      DB_NAME: orderoptima
      DISCOVERY: "service-discovery"
    networks:
      - orderoptima-network
  # Service discovery
  service-discovery:
    build: 
      context: .
      dockerfile: Dockerfile.discovery
    restart: always
    ports:
      - "8761:8761" 
    networks:
      - orderoptima-network

  # User service
  user-service:
    build: 
      context: .
      dockerfile: Dockerfile.user
    restart: always
    depends_on:
      - service-discovery  
    ports:
      - "7000:7000"
    environment:
      DB_HOST: postgres  
      DB_USERNAME: postgres
      DB_PASSWORD: kill
      DB_NAME: orderoptima
      DISCOVERY: "service-discovery"
      API_KEY: 773292176862193
      API_SECRET: uxmd-1KB9863lh2Uo2Qu44DLwVs
      CLOUD_NAME: dbzniegok

    networks:
      - orderoptima-network
  order-service:
    build: 
      context: .
      dockerfile: Dockerfile.order
    restart: always
    depends_on:
      - service-discovery  
    environment:
      DB_HOST: postgres  
      DB_USERNAME: postgres
      DB_PASSWORD: kill
      DB_NAME: orderoptima
      DISCOVERY: "service-discovery"
    networks:
      - orderoptima-network  
  inventory-managment:
    build: 
      context: .
      dockerfile: Dockerfile.inventory
    restart: always
    depends_on:
      - service-discovery  
    ports:
      - "8086:8086"  
    environment:
      DB_HOST: postgres  
      DB_USERNAME: postgres
      DB_PASSWORD: kill
      DB_NAME: orderoptima
      DISCOVERY: "service-discovery"
    networks:
      - orderoptima-network



networks:
  orderoptima-network:
    driver: bridge
volumes:
  postgres-data:
    driver: local
  zookeeper-data:
    driver: local
  kafka-data:
    driver: local

